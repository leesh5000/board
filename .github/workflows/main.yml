name: CI/CD to Elastic Beanstalk (OIDC)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write           # OIDC 토큰을 발급받기 위해 필요
      contents: read            # repo 코드를 체크아웃하기 위해 필요

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Gradle 캐시 설정 (의존성 가속)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # 3. Corretto 21 (Java 21) 설치
      - name: Set up Amazon Corretto 21
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: '21'
          cache: gradle

      # 4. Gradle 빌드 (Kotlin + Spring Boot)
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      # 5. Elastic Beanstalk용으로 JAR을 ZIP 패키징
      - name: Package application for Elastic Beanstalk
        run: |
          mkdir eb-deploy
          cp build/libs/*.jar eb-deploy/
          cd eb-deploy
          zip -r ../app.zip .
          cd ..

      # 6. OIDC 기반으로 IAM 역할 가져와 AWS 자격증명 구성
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 7. EB에 배포
      - name: Deploy to Elastic Beanstalk
        uses: aws-actions/elastic-beanstalk-deploy@v1
        with:
          application-name: ${{ secrets.EB_APPLICATION_NAME }}    # EB 애플리케이션 이름
          environment-name: ${{ secrets.EB_ENVIRONMENT_NAME }}    # EB 환경 이름
          version-label: ${{ github.sha }}                         # 커밋 SHA를 버전 레이블로 사용
          deployment-package: app.zip
