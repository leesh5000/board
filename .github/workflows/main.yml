name: CI/CD to Elastic Beanstalk (OIDC)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write           # OIDC 토큰을 발급받기 위해 필요
      contents: read            # repo 코드를 체크아웃하기 위해 필요

    # JasyptConfig가 @Profile("prod") 하에서 동작하도록, 빌드·실행 시 prod 프로파일과 마스터 키를 설정합니다.
    env:
      SPRING_PROFILES_ACTIVE: prod
      JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Gradle 캐시 설정 (의존성 가속)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # 3. gradlew에 실행 권한 부여
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 4. Corretto 21 (Java 21) 설치
      - name: Set up Amazon Corretto 21
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: '21'
          cache: gradle

      # 5. Gradle 빌드 (Kotlin + Spring Boot)
      #    prod 프로파일과 JASYPT_ENCRYPTOR_PASSWORD 환경 변수가 이미 job-level env로 설정되어 있습니다.
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      # 6. Elastic Beanstalk용으로 JAR을 ZIP 패키징
      - name: Package application for Elastic Beanstalk
        run: |
          mkdir eb-deploy
          cp build/libs/*.jar eb-deploy/
          cd eb-deploy
          zip -r ../app.zip .
          cd ..

      # 7. OIDC 기반으로 IAM 역할 가져와 AWS 자격증명 구성
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 8. S3에 ZIP 업로드 및 EB에 버전 생성/배포
      #    prod 프로파일과 JASYPT_ENCRYPTOR_PASSWORD가 EB 환경 변수로도 반영되도록 --option-settings를 추가합니다.
      - name: Deploy to Elastic Beanstalk via AWS CLI
        env:
          BUCKET_NAME:    ${{ secrets.EB_S3_BUCKET }}
          APP_NAME:       ${{ secrets.EB_APPLICATION_NAME }}
          ENV_NAME:       ${{ secrets.EB_ENVIRONMENT_NAME }}
          REGION:         ${{ secrets.AWS_REGION }}
          VERSION_LABEL:  ${{ github.sha }}
          # AWS CLI가 읽도록 job-level JASYPT_ENCRYPTOR_PASSWORD/SPRING_PROFILES_ACTIVE도 함께 전달
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          SPRING_PROFILES_ACTIVE: prod
        run: |
          # 8.1 S3로 ZIP 업로드
          aws s3 cp app.zip s3://${BUCKET_NAME}/${VERSION_LABEL}.zip

          # 8.2 새 애플리케이션 버전 생성
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "${VERSION_LABEL}" \
            --source-bundle S3Bucket="${BUCKET_NAME}",S3Key="${VERSION_LABEL}.zip" \
            --region "${REGION}"

          # 8.3 환경 변수(prod 프로파일 + Jasypt 마스터 키)를 EB 환경에 설정하면서 버전 업데이트
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${VERSION_LABEL}" \
            --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_PROFILES_ACTIVE,Value=prod \
                             Namespace=aws:elasticbeanstalk:application:environment,OptionName=JASYPT_ENCRYPTOR_PASSWORD,Value=${JASYPT_ENCRYPTOR_PASSWORD} \
            --region "${REGION}"
